{"version":3,"sources":["./src/app/routes/customer/customer-routing.module.ts","./src/app/routes/customer/customer-create/customer-create.component.ts","./src/app/routes/customer/customer-create/customer-create.component.html","./src/app/routes/customer/costomer.module.ts","./src/app/routes/customer/customer-list/customer-list.component.ts","./src/app/routes/customer/customer-list/customer-list.component.html"],"names":[],"mappings":"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","file":"customer-costomer-module.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CustomerCreateComponent } from './customer-create/customer-create.component';\r\nimport { CustomerListComponent } from './customer-list/customer-list.component';\r\n\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: \"list\",\r\n    component: CustomerListComponent\r\n  },\r\n  {\r\n    path: \"create\",\r\n    component: CustomerCreateComponent\r\n  },\r\n  {\r\n    path: \"edit/:id\",\r\n    component: CustomerCreateComponent\r\n  }\r\n]\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CustomerRoutingModule { }\r\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, ParamMap, Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { Customer } from '../customer.model';\nimport { CustomerService } from '../customer.service';\n\n@Component({\n  selector: 'app-customer-create',\n  templateUrl: './customer-create.component.html',\n  styleUrls: ['./customer-create.component.scss']\n})\nexport class CustomerCreateComponent implements OnInit {\n\n\n\n  customer: Customer;\n  customerForm: FormGroup;\n  private mode = \"create\";\n  private id: any;\n  isLoading = false;\n\n  constructor(public customerService: CustomerService,\n    public aroute: ActivatedRoute,\n    private router: Router,\n    private toastr: ToastrService,) { }\n\n  ngOnInit() {\n\n    this.aroute.paramMap.subscribe((paramMap: ParamMap) => {\n      this.createForm();\n\n      if (paramMap.has(\"id\")) {\n        this.mode = \"edit\";\n        this.id = paramMap.get(\"id\");\n\n        this.customerService.getCustomer(this.id).subscribe(data => {\n          console.log(data);\n          this.customer = {\n            id: data.id,\n            name: data.name,\n            address: data.address,\n            phone: data.phone,\n            email: data.email\n          };\n\n          this.customerForm.setValue({\n            name: this.customer.name,\n            address: this.customer.address,\n            phone: this.customer.phone,\n            email: this.customer.email\n          });\n        });\n      } else {\n        this.mode = \"create\";\n        this.id = null;\n      }\n    });\n\n\n  }\n  private createForm() {\n    this.customerForm = new FormGroup(\n      {\n        name: new FormControl(null, Validators.required),\n        address: new FormControl(null),\n        phone: new FormControl(null, [Validators.required,Validators.pattern(\"^[0-9]*$\"),Validators.minLength(11),Validators.maxLength(11)]),\n        email: new FormControl(null, [Validators.email])\n      }\n    );\n  }\n\n  onSavePost() {\n    if (this.customerForm.invalid) {\n      return;\n    }\n\n    if (this.mode === \"create\") {\n      this.customerService.addCustomer(this.userData())\n      .subscribe((responseData) => {\n        this.isLoading = false;\n        this.toastr.success(\"Customer has been added\");\n        this.router.navigate(['/customer/list']);\n      },(err)=>{\n        this.isLoading = false;\n      });\n    }\n    else {\n      this.customerService.updateCustomer(this.userData())\n      .subscribe((responseData) => {\n        this.isLoading = false;\n        this.toastr.success(\"Customer has been Updated\");\n        this.router.navigate(['/customer/list']);\n      },(err)=>{\n        this.isLoading = false;\n      });\n    }\n  }\n\n\n  userData(): Customer {\n    return (this.customer = {\n      id: this.mode=='create'?null:this.id,\n      name: this.customerForm.get('name').value,\n      address: this.customerForm.get('address').value,\n      phone: this.customerForm.get('phone').value,\n      email: this.customerForm.get('email').value,\n    });\n  }\n\n  onReset() {\n    this.customerForm.reset();\n  }\n}\n","<page-header\n  class=\"bg-blue-600\"\n  [nav]=\"['home', 'menu.customer', 'menu.customer.create']\"\n></page-header>\n\n<mat-progress-bar mode=\"indeterminate\" *ngIf=\"isLoading\"></mat-progress-bar>\n<mat-card>\n  <mat-card-title>Customer Form</mat-card-title>\n\n  <form [formGroup]=\"customerForm\" class=\"form-field-full\">\n    <div fxLayout=\"row wrap\" fxLayoutGap=\"8px grid\">\n      <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\n        <mat-form-field>\n          <input\n            id=\"nameInput\"\n            matInput\n            placeholder=\"Name\"\n            formControlName=\"name\"\n            autocomplete=\"name\"\n            type=\"text\"\n          />\n          <mat-error *ngIf=\"customerForm.controls['name'].hasError('required')\">\n            Name is\n            <strong>required</strong>\n          </mat-error>\n        </mat-form-field>\n      </div>\n      <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\n        <mat-form-field>\n          <input\n            matInput\n            placeholder=\"Mobile\"\n            formControlName=\"phone\"\n            autocomplete=\"phone\"\n            type=\"text\"\n          />\n          <mat-error *ngIf=\"customerForm.controls['phone'].hasError('required')\">\n            Mobile is\n            <strong>required</strong>\n          </mat-error>\n          <mat-error\n            *ngIf=\"\n              customerForm.controls['phone'].hasError('pattern') ||\n              customerForm.controls['phone'].hasError('minlength') ||\n              customerForm.controls['phone'].hasError('maxlength')\n            \"\n          >\n            Mobile is\n            <strong>incorrect</strong>\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\n        <mat-form-field>\n          <input matInput placeholder=\"Email\" formControlName=\"email\" autocomplete=\"email\" />\n          <mat-error *ngIf=\"customerForm.controls['email'].hasError('email')\">\n            Email is\n            <strong>incorrect</strong>\n          </mat-error>\n        </mat-form-field>\n      </div>\n\n      <div fxFlex=\"50\" fxFlex.lt-sm=\"100\">\n        <mat-form-field>\n          <textarea\n            matInput\n            placeholder=\"Address\"\n            formControlName=\"address\"\n            rows=\"1\"\n            autocomplete=\"address\"\n          ></textarea>\n        </mat-form-field>\n      </div>\n    </div>\n\n    <button\n      mat-raised-button\n      color=\"primary\"\n      [disabled]=\"isLoading\"\n      type=\"submit\"\n      (click)=\"onSavePost()\"\n    >\n      Save\n    </button>\n  </form>\n</mat-card>\n","import { NgModule } from '@angular/core';\r\nimport { CustomerRoutingModule } from './customer-routing.module';\r\nimport { CustomerListComponent } from './customer-list/customer-list.component';\r\nimport { CustomerCreateComponent } from './customer-create/customer-create.component';\r\nimport { SharedModule } from '@shared';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CustomerListComponent,\r\n    CustomerCreateComponent\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    CustomerRoutingModule,\r\n  ],\r\n  entryComponents: []\r\n})\r\nexport class CustomerModule { }\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { MtxDialog, MtxGridColumn } from '@ng-matero/extensions';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { Customer } from '../customer.model';\nimport { CustomerService } from '../customer.service';\n\n@Component({\n  selector: 'app-customer-list',\n  templateUrl: './customer-list.component.html',\n  styleUrls: ['./customer-list.component.scss']\n})\nexport class CustomerListComponent implements OnInit, OnDestroy {\n\n  columns: MtxGridColumn[] = [\n    {\n      header: this.translate.stream('customer_list_table.name'),\n      field: 'name',\n      sortable: true,\n      disabled: true,\n      minWidth: 100,\n    },\n    {\n      header: this.translate.stream('customer_list_table.phone'),\n      field: 'phone',\n      sortable: true,\n      disabled: false,\n      minWidth: 100,\n    },\n    {\n      header: this.translate.stream('customer_list_table.email'),\n      field: 'email',\n      sortable: true,\n      minWidth: 100,\n    },\n    {\n      header: this.translate.stream('customer_list_table.address'),\n      field: 'address',\n      sortable: true,\n      minWidth: 100,\n    },\n    {\n      header: this.translate.stream('customer_list_table.operation'),\n      field: 'operation',\n      minWidth: 120,\n      width: '120px',\n      pinned: 'right',\n      type: 'button',\n      buttons: [\n        {\n          type: 'icon',\n          icon: 'edit',\n          tooltip: this.translate.stream('customer_list_table.edit'),\n          click: record => this.edit(record),\n        },\n        {\n          color: 'warn',\n          icon: 'delete',\n          text: this.translate.stream('customer_list_table.delete'),\n          tooltip: this.translate.stream('customer_list_table.delete'),\n          pop: true,\n          popTitle: this.translate.stream('customer_list_table.confirm_delete'),\n          popCloseText: this.translate.stream('customer_list_table.close'),\n          popOkText: this.translate.stream('customer_list_table.ok'),\n          click: record => this.delete(record),\n        },\n      ],\n    },\n  ];\n  private customersSub: Subscription;\n  private spinnerSub: Subscription;\n\n  isLoading=false;\n  listData= [];\n  mainList=[];\n  searchKey: string;\n\n  constructor(private customerService: CustomerService,\n    private translate: TranslateService,\n    public dialog: MtxDialog,\n    private router: Router,\n    private cdr: ChangeDetectorRef) { }\n\n  ngOnInit() {\n    this.isLoading=true;\n    this.customerService.getCustomers();\n    this.customersSub = this.customerService\n      .getCustomerUpdateListener()\n      .subscribe((customerData: { customers: Customer[] }) => {\n        this.isLoading=false;\n        this.mainList = customerData.customers;\n        this.listData=this.mainList;\n    });\n  }\n\n  onSearchClear() {\n    this.searchKey = \"\";\n    this.listData = this.mainList;\n  }\n\n  applyFilter() {\n    this.listData = this.filter(this.mainList);\n  }\n\n  filter(data:any){\n    return data.filter(obj=>{\n        return obj.name.toLowerCase().includes(this.searchKey) ||\n        obj.phone.toLowerCase().includes(this.searchKey)\n      }\n    )\n  }\n\n  edit(value: any) {\n    this.router.navigate(['/customer/edit', value.id ]);\n  }\n\n  delete(value: any) {\n    this.isLoading=true;\n\n    this.customerService.deleteCustomer(value.id).subscribe(() => {\n      this.customerService.getCustomers();\n    }, () => {\n      this.isLoading=false;\n    });\n  }\n  ngOnDestroy(){\n    this.customersSub.unsubscribe();\n  }\n}\n","<page-header class=\"bg-blue-600\" [nav]=\"['home','menu.supplier','menu.supplier.list']\"></page-header>\n\n<div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n  <mat-form-field floatLabel=\"never\" fxFlex=\"30\" class=\"m-r-8\">\n    <input matInput [(ngModel)]=\"searchKey\" placeholder=\"Search\" autocomplete=\"off\" (keyup)=\"applyFilter()\">\n    <button mat-button matSuffix mat-icon-button aria-label=\"Clear\" *ngIf=\"searchKey\" (click)=\"onSearchClear()\">\n      <mat-icon>close</mat-icon>\n    </button>\n  </mat-form-field>\n\n  <button class=\"m-r-8\" mat-raised-button color=\"primary\" routerLink=\"/customer/create\"><mat-icon>add</mat-icon> Add New</button>\n</div>\n\n<mtx-grid [data]=\"listData\"\n          [columns]=\"columns\"\n          [loading]=\"isLoading\"\n          [columnResizable]=\"false\"\n          [rowHover]=\"true\"\n          [rowStriped]=\"true\"\n          [showToolbar]=\"true\"\n          [toolbarTitle]=\"'Customer Grid Toolbar'\"\n          [pageOnFront]=\"true\"\n          [showPaginator]=\"true\"\n          [pageSizeOptions]=\"[5,10,50,100]\"\n          [pageIndex]=\"0\"\n          [pageSize]=\"10\">\n</mtx-grid>\n"],"sourceRoot":"webpack:///"}
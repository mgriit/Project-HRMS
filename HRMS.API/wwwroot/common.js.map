{"version":3,"sources":["./src/app/routes/category/category.service.ts","./src/app/routes/customer/customer.service.ts","./src/app/routes/product/product.service.ts","./src/app/routes/supplier/supplier.service.ts","./node_modules/ngx-print/__ivy_ngcc__/fesm2015/ngx-print.js"],"names":[],"mappings":"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;IAED,WAAW,CAAC,QAAkB;QAC5B,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CAAsC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACtE,CAAC;IAED,cAAc,CAAC,QAAkB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,GAAG,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;IAED,cAAc,CAAC,EAAE;QACf,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,EAAE,CAAC,CAAC;IAC5C,CAAC;;8EA5CU,eAAe;kGAAf,eAAe,WAAf,eAAe,mBAFd,MAAM;;;;;;;;;;;;;ACZpB;AAAA;AAAA;AAAA;AAAyE;;AAEzE;AACA;AACA,cAAc,uFAAuF;AACrG;AACwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,2CAA2C,GAAG;AACxE;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,mEAAmE,YAAY;AAC/E,SAAS;AACT;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,iBAAiB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uCAAuC;AAC1D,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ,YAAY;AACZ;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,eAAe,IAAI,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,uCAAuC;AACvG,yBAAyB,+DAAwB,EAAE,mIAAmI;AACtL,QAAQ,wDAAiB,iEAAiE,oBAAoB,EAAE;AAChH,KAAK,EAAE,WAAW,qLAAqL,EAAE;AACzM;AACA,sBAAsB,OAAO,mDAAK,EAAE;AACpC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,kBAAkB,OAAO,mDAAK,EAAE;AAChC,sBAAsB,OAAO,mDAAK,EAAE;AACpC,aAAa,OAAO,0DAAY,oBAAoB;AACpD;AACA,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,uDAAS;AACvB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,GAAG;AACrC,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,kBAAkB,0DAAY;AAC9B;AACA,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS;AACT,kBAAkB,mDAAK;AACvB,SAAS,GAAG,EAAE,EAAE;;AAEhB;AACA;AACA,cAAc,uFAAuF;AACrG;AACA;AACA;AACA,0DAA0D,oCAAoC;AAC9F,sBAAsB,8DAAuB,EAAE,uBAAuB;AACtE,sBAAsB,8DAAuB,EAAE,gBAAgB;AAC/D,cAAc,oDAAoD,gEAAyB,kBAAkB,kEAAkE,EAAE,EAAE;AACnL,cAAc,oDAAoD,+DAAwB;AAC1F,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,eAAe,EAAE;;AAEtB;AACA;AACA,cAAc,uFAAuF;AACrG;;AAEA;AACA;AACA,cAAc,uFAAuF;AACrG;;AAE6C;;AAE7C,qC","file":"common.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from '@env/environment';\nimport { DropdownItem } from '@shared/models/dropdown-item';\nimport { Subject } from 'rxjs';\n\nimport { Category } from './category.model';\n\nconst BACKEND_URL = environment.baseUrl + \"/category/\";\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CategoryService {\n  private categories: Category[] = [];\n  private categoriesUpdated = new Subject<{ categorys: Category[]; count: number }>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n  getCategories() {\n    this.http\n      .get<{ message: string; categories: Category[]; count: number }>(\n        BACKEND_URL\n      )\n      .subscribe((categoryData) => {\n        console.log(categoryData);\n        this.categories = categoryData.categories;\n        this.categoriesUpdated.next({\n          categorys: [...this.categories],\n          count: categoryData.count,\n        });\n      });\n  }\n\n  getCategoryUpdateListener() {\n    return this.categoriesUpdated.asObservable();\n  }\n\n  getCategory(id) {\n    return this.http.get<Category>(BACKEND_URL + id);\n  }\n\n  getCategoriesShort() {\n    return this.http.get<DropdownItem[]>(BACKEND_URL + \"short\");\n  }\n\n  addCategory(category: Category) {\n    return this.http\n      .post<{ message: string; post: Category }>(BACKEND_URL, category);\n  }\n\n  updateCategory(category: Category) {\n    return this.http.put(BACKEND_URL + category.id, category);\n  }\n\n  deleteCategory(id) {\n    return this.http.delete(BACKEND_URL + id);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from '@env/environment';\nimport { DropdownItem } from '@shared/models/dropdown-item';\nimport { Subject } from 'rxjs';\nimport { Customer } from './customer.model';\n\nconst BACKEND_URL = environment.baseUrl + \"/customer/\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  private customers: Customer[] = [];\n  private customersUpdated = new Subject<{ customers: Customer[] }>();\n  constructor(private http: HttpClient, private router: Router) { }\n  getCustomers() {\n    this.http\n      .get<{ message: string; customers: Customer[];}>(\n        BACKEND_URL\n      )\n      .subscribe((customerData) => {\n        this.customers = customerData.customers;\n        this.customersUpdated.next({\n          customers: [...this.customers]\n        });\n      });\n  }\n\n  getCustomerUpdateListener() {\n    return this.customersUpdated.asObservable();\n  }\n\n  getCustomer(id) {\n    return this.http.get<Customer>(BACKEND_URL + id);\n  }\n\n  getCustomersShort(offset: number, count: number, q: string) {\n    let queryParams = `?offset=${offset}&count=${count}`;\n    if(q){\n      queryParams += `&q=${q}`;\n    }\n    return this.http.get<DropdownItem[]>(BACKEND_URL + \"short\"+ queryParams);\n  }\n\n  addCustomer(customer: Customer) {\n    return this.http\n      .post<{ message: string; post: Customer }>(BACKEND_URL, customer);\n  }\n\n  updateCustomer(customer: Customer) {\n    return this.http.put(BACKEND_URL + customer.id, customer);\n  }\n\n  deleteCustomer(id) {\n    return this.http.delete(BACKEND_URL + id);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from '@env/environment';\nimport { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Product } from './product.model';\n\nconst BACKEND_URL = environment.baseUrl + \"/product/\";\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  private products: Product[] = [];\n  private productsUpdated = new Subject<{ products: Product[]; count: number }>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n  getProducts() {\n    this.http\n      .get<{ message: string; products: any; count: number }>(\n        BACKEND_URL\n      )\n      .pipe(\n        map(data => {\n          return {\n            products: data.products.map(p => {\n              return {\n                id: p.id,\n                name: p.name,\n                categoryId: p.category.id,\n                categoryName: p.category.name,\n                supplierId: p.supplier.id,\n                supplierName: p.supplier.name,\n                description:p.description,\n                stock: p.stock?p.stock:0,\n                unit:p.unit,\n                bprice: p.bprice,\n                price:p.price,\n                status: p.status\n              };\n            }),\n            count: data.count\n          };\n        })\n      )\n      .subscribe((productData) => {\n        console.log(productData);\n        this.products = productData.products;\n        this.productsUpdated.next({\n          products: [...this.products],\n          count: productData.count,\n        });\n      });\n  }\n\n  getProductUpdateListener() {\n    return this.productsUpdated.asObservable();\n  }\n\n  getProduct(id) {\n    return this.http.get<any>(BACKEND_URL + id)\n    .pipe(\n      map(data => {\n        return {\n            id: data.id,\n            name: data.name,\n            categoryId: data.category.id,\n            categoryName: data.category.name,\n            supplierId: data.supplier.id,\n            supplierName: data.supplier.name,\n            description:data.description,\n            unit: data.unit,\n            bprice: data.bprice,\n            price: data.price\n        };\n      })\n    );\n  }\n\n  addProduct(product: Product) {\n    this.http\n      .post<{ message: string; post: Product }>(BACKEND_URL, product)\n      .subscribe((responseData) => {\n        this.router.navigate(['/product/list']);\n      });\n  }\n\n  updateProduct(product: Product) {\n    this.http.put(BACKEND_URL + product.id, product).subscribe((response) => {\n      this.router.navigate(['/product/list']);\n    });\n  }\n\n  deleteProduct(id) {\n    return this.http.delete(BACKEND_URL + id);\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { environment } from '@env/environment';\nimport { DropdownItem } from '@shared/models/dropdown-item';\nimport { Subject } from 'rxjs';\nimport { Supplier } from './supplier.model';\n\nconst BACKEND_URL = environment.baseUrl + \"/supplier/\";\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SupplierService {\n  private suppliers: Supplier[] = [];\n  private suppliersUpdated = new Subject<{ suppliers: Supplier[]; count: number }>();\n\n  constructor(private http: HttpClient, private router: Router) {}\n  getSuppliers(postsPerPage: number, currentPage: number) {\n    const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n    this.http\n      .get<{ message: string; suppliers: Supplier[]; count: number }>(\n        BACKEND_URL\n        //+ queryParams\n      )\n      .subscribe((supplierData) => {\n        this.suppliers = supplierData.suppliers;\n        this.suppliersUpdated.next({\n          suppliers: [...this.suppliers],\n          count: supplierData.count,\n        });\n      });\n  }\n\n  getSupplierUpdateListener() {\n    return this.suppliersUpdated.asObservable();\n  }\n\n  getSupplier(id) {\n    return this.http.get<Supplier>(BACKEND_URL + id);\n  }\n\n  getSuppliersShort() {\n    return this.http.get<DropdownItem[]>(BACKEND_URL + \"short\");\n  }\n\n  addSupplier(supplier: Supplier) {\n    return this.http\n      .post<{ message: string; post: Supplier }>(BACKEND_URL, supplier);\n  }\n\n  updateSupplier(supplier: Supplier) {\n    return this.http.put(BACKEND_URL + supplier.id, supplier);\n  }\n\n  deleteSupplier(id) {\n    return this.http.delete(BACKEND_URL + id);\n  }\n}\n","import { Directive, HostListener, Input, NgModule } from '@angular/core';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nimport * as ɵngcc0 from '@angular/core';\nclass NgxPrintDirective {\r\n    constructor() {\r\n        this._printStyle = [];\r\n        /**\r\n         *\r\n         *\r\n         * \\@memberof NgxPrintDirective\r\n         */\r\n        this.useExistingCss = false;\r\n        /**\r\n         * A delay in milliseconds to force the print dialog to wait before opened. Default: 0\r\n         *\r\n         * \\@memberof NgxPrintDirective\r\n         */\r\n        this.printDelay = 0;\r\n        /**\r\n         *\r\n         *\r\n         * @return html for the given tag\r\n         *\r\n         * \\@memberof NgxPrintDirective\r\n         */\r\n        this._styleSheetFile = '';\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * \\@memberof NgxPrintDirective\r\n     * @param {?} values\r\n     * @return {?}\r\n     */\r\n    set printStyle(values) {\r\n        for (let key in values) {\r\n            if (values.hasOwnProperty(key)) {\r\n                this._printStyle.push((key + JSON.stringify(values[key])).replace(/['\"]+/g, ''));\r\n            }\r\n        }\r\n        this.returnStyleValues();\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * \\@memberof NgxPrintDirective\r\n     * @return {?} the string that create the stylesheet which will be injected\r\n     * later within <style></style> tag.\r\n     *\r\n     * -join/replace to transform an array objects to css-styled string\r\n     *\r\n     */\r\n    returnStyleValues() {\r\n        return `<style> ${this._printStyle.join(' ').replace(/,/g, ';')} </style>`;\r\n    }\r\n    /**\r\n     * \\@memberof NgxPrintDirective\r\n     * @param {?} cssList\r\n     * @return {?}\r\n     */\r\n    set styleSheetFile(cssList) {\r\n        /** @type {?} */\r\n        let linkTagFn = (/**\r\n         * @param {?} cssFileName\r\n         * @return {?}\r\n         */\r\n        function (cssFileName) {\r\n            return `<link rel=\"stylesheet\" type=\"text/css\" href=\"${cssFileName}\">`;\r\n        });\r\n        if (cssList.indexOf(',') !== -1) {\r\n            /** @type {?} */\r\n            const valueArr = cssList.split(',');\r\n            for (let val of valueArr) {\r\n                this._styleSheetFile = this._styleSheetFile + linkTagFn(val);\r\n            }\r\n        }\r\n        else {\r\n            this._styleSheetFile = linkTagFn(cssList);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?} string which contains the link tags containing the css which will\r\n     * be injected later within <head></head> tag.\r\n     *\r\n     */\r\n    returnStyleSheetLinkTags() {\r\n        return this._styleSheetFile;\r\n    }\r\n    /**\r\n     * @private\r\n     * @param {?} tag\r\n     * @return {?}\r\n     */\r\n    getElementTag(tag) {\r\n        /** @type {?} */\r\n        const html = [];\r\n        /** @type {?} */\r\n        const elements = document.getElementsByTagName(tag);\r\n        for (let index = 0; index < elements.length; index++) {\r\n            html.push(elements[index].outerHTML);\r\n        }\r\n        return html.join('\\r\\n');\r\n    }\r\n    /**\r\n     *\r\n     * @private\r\n     * @param {?} data the html element collection to save defaults to\r\n     *\r\n     * @return {?}\r\n     */\r\n    getFormData(data) {\r\n        for (var i = 0; i < data.length; i++) {\r\n            data[i].defaultValue = data[i].value;\r\n            if (data[i].checked) {\r\n                data[i].defaultChecked = true;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * @return {?} html section to be printed along with some associated inputs\r\n     *\r\n     */\r\n    getHtmlContents() {\r\n        /** @type {?} */\r\n        let printContents = document.getElementById(this.printSectionId);\r\n        /** @type {?} */\r\n        let innards = printContents.getElementsByTagName('input');\r\n        this.getFormData(innards);\r\n        /** @type {?} */\r\n        let txt = printContents.getElementsByTagName('textarea');\r\n        this.getFormData(txt);\r\n        return printContents.innerHTML;\r\n    }\r\n    /**\r\n     *\r\n     *\r\n     * \\@memberof NgxPrintDirective\r\n     * @return {?}\r\n     */\r\n    print() {\r\n        /** @type {?} */\r\n        let printContents;\r\n        /** @type {?} */\r\n        let popupWin;\r\n        /** @type {?} */\r\n        let styles = '';\r\n        /** @type {?} */\r\n        let links = '';\r\n        /** @type {?} */\r\n        const baseTag = this.getElementTag('base');\r\n        if (this.useExistingCss) {\r\n            styles = this.getElementTag('style');\r\n            links = this.getElementTag('link');\r\n        }\r\n        printContents = this.getHtmlContents();\r\n        popupWin = window.open(\"\", \"_blank\", \"top=0,left=0,height=auto,width=auto\");\r\n        popupWin.document.open();\r\n        popupWin.document.write(`\r\n      <html>\r\n        <head>\r\n          <title>${this.printTitle ? this.printTitle : \"\"}</title>\r\n          ${baseTag}\r\n          ${this.returnStyleValues()}\r\n          ${this.returnStyleSheetLinkTags()}\r\n          ${styles}\r\n          ${links}\r\n        </head>\r\n        <body>\r\n          ${printContents}\r\n          <script defer>\r\n            function triggerPrint(event) {\r\n              window.removeEventListener('load', triggerPrint, false);\r\n              setTimeout(function() {\r\n                closeWindow(window.print());\r\n              }, ${this.printDelay});\r\n            }\r\n            function closeWindow(){\r\n                window.close();\r\n            }\r\n            window.addEventListener('load', triggerPrint, false);\r\n          </script>\r\n        </body>\r\n      </html>`);\r\n        popupWin.document.close();\r\n    }\r\n}\nNgxPrintDirective.ɵfac = function NgxPrintDirective_Factory(t) { return new (t || NgxPrintDirective)(); };\nNgxPrintDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NgxPrintDirective, selectors: [[\"button\", \"ngxPrint\", \"\"]], hostBindings: function NgxPrintDirective_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NgxPrintDirective_click_HostBindingHandler() { return ctx.print(); });\n    } }, inputs: { useExistingCss: \"useExistingCss\", printDelay: \"printDelay\", printStyle: \"printStyle\", styleSheetFile: \"styleSheetFile\", printSectionId: \"printSectionId\", printTitle: \"printTitle\" } });\r\nNgxPrintDirective.propDecorators = {\r\n    printSectionId: [{ type: Input }],\r\n    printTitle: [{ type: Input }],\r\n    useExistingCss: [{ type: Input }],\r\n    printDelay: [{ type: Input }],\r\n    printStyle: [{ type: Input }],\r\n    styleSheetFile: [{ type: Input }],\r\n    print: [{ type: HostListener, args: ['click',] }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPrintDirective, [{\n        type: Directive,\n        args: [{\n                selector: \"button[ngxPrint]\"\n            }]\n    }], function () { return []; }, { useExistingCss: [{\n            type: Input\n        }], printDelay: [{\n            type: Input\n        }], printStyle: [{\n            type: Input\n        }], styleSheetFile: [{\n            type: Input\n        }], \n    /**\n     *\n     *\n     * \\@memberof NgxPrintDirective\n     * @return {?}\n     */\n    print: [{\n            type: HostListener,\n            args: ['click']\n        }], printSectionId: [{\n            type: Input\n        }], printTitle: [{\n            type: Input\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nclass NgxPrintModule {\r\n}\nNgxPrintModule.ɵfac = function NgxPrintModule_Factory(t) { return new (t || NgxPrintModule)(); };\nNgxPrintModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxPrintModule });\nNgxPrintModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgxPrintModule, { declarations: [NgxPrintDirective], exports: [NgxPrintDirective] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgxPrintModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgxPrintDirective],\n                imports: [],\n                exports: [NgxPrintDirective]\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxPrintDirective, NgxPrintModule };\n\n//# sourceMappingURL=ngx-print.js.map"],"sourceRoot":"webpack:///"}